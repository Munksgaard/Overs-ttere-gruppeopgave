local
in
datatype token =
    COLON
  | COMMA
  | HEJ
  | ID
  | LPAR
  | RPAR
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";

val yytransl = #[
  257 (* COLON *),
  258 (* COMMA *),
  259 (* HEJ *),
  260 (* ID *),
  261 (* LPAR *),
  262 (* RPAR *),
    0];

val yylhs = "\255\255\
\\001\000\002\000\002\000\002\000\003\000\003\000\000\000";

val yylen = "\002\000\
\\001\000\003\000\006\000\004\000\001\000\003\000\002\000";

val yydefred = "\000\000\
\\000\000\000\000\000\000\007\000\001\000\000\000\000\000\000\000\
\\000\000\000\000\004\000\000\000\000\000\006\000\003\000";

val yydgoto = "\002\000\
\\004\000\009\000\010\000";

val yysindex = "\005\000\
\\253\254\000\000\253\254\000\000\000\000\254\254\253\254\006\255\
\\007\255\002\255\000\000\253\254\009\255\000\000\000\000";

val yyrindex = "\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\\005\255\000\000\000\000\000\000\000\000\000\000\000\000";

val yygindex = "\000\000\
\\000\000\002\000\003\000";

val YYTABLESIZE = 263;
val yytable = "\007\000\
\\002\000\003\000\005\000\008\000\006\000\001\000\011\000\013\000\
\\012\000\015\000\005\000\000\000\000\000\000\000\014\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\002\000\000\000\000\000\000\000\002\000";

val yycheck = "\002\001\
\\000\000\005\001\001\000\006\001\003\000\001\000\001\001\006\001\
\\002\001\001\001\006\001\255\255\255\255\255\255\012\000\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\002\001\255\255\255\255\255\255\006\001";

val yyact = vector_ 8 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file test.grm, line 14 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 0 : Cat.Exp
in
( [] ) end : Cat.Prog))
;
(* Rule 2, file test.grm, line 17 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__2__ = peekVal 1 : Cat.Exp
in
( [] ) end : Cat.Exp))
;
(* Rule 3, file test.grm, line 18 *)
val _ = update_ yyact 3
(fn () => repr(let
val d__2__ = peekVal 4 : Cat.Exp
val d__4__ = peekVal 2 : Cat.Exp list
in
( [] ) end : Cat.Exp))
;
(* Rule 4, file test.grm, line 19 *)
val _ = update_ yyact 4
(fn () => repr(let
val d__2__ = peekVal 2 : Cat.Exp
in
( [] ) end : Cat.Exp))
;
(* Rule 5, file test.grm, line 22 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 0 : Cat.Exp
in
( [] ) end : Cat.Exp list))
;
(* Rule 6, file test.grm, line 23 *)
val _ = update_ yyact 6
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Exp
val d__3__ = peekVal 0 : Cat.Exp list
in
( [] ) end : Cat.Exp list))
;
(* Entry Prog *)
val _ = update_ yyact 7 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun Prog lexer lexbuf = yyparse yytables 1 lexer lexbuf;
