local
type t__1__ = (int*int)
type t__2__ = (int*int)
type t__3__ = (int*int)
type t__4__ = (int*int)
type t__5__ = (int*int)
type t__6__ = real*(int*int)
type t__7__ = string*(int*int)
type t__8__ = (int*int)
type t__9__ = (int*int)
type t__10__ = (int*int)
type t__11__ = (int*int)
type t__12__ = int*(int*int)
type t__13__ = (int*int)
type t__14__ = (int*int)
type t__15__ = (int*int)
type t__16__ = (int*int)
type t__17__ = (int*int)
in
datatype token =
    AND of t__1__
  | DIVIDE of t__2__
  | ELSE of t__3__
  | EOF of t__4__
  | EQ of t__5__
  | FLOAT of t__6__
  | ID of t__7__
  | IF of t__8__
  | LPAR of t__9__
  | MINUS of t__10__
  | NOT of t__11__
  | NUM of t__12__
  | OR of t__13__
  | PLUS of t__14__
  | RPAR of t__15__
  | THEN of t__16__
  | TIMES of t__17__
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";

val yytransl = #[
  257 (* AND *),
  258 (* DIVIDE *),
  259 (* ELSE *),
  260 (* EOF *),
  261 (* EQ *),
  262 (* FLOAT *),
  263 (* ID *),
  264 (* IF *),
  265 (* LPAR *),
  266 (* MINUS *),
  267 (* NOT *),
  268 (* NUM *),
  269 (* OR *),
  270 (* PLUS *),
  271 (* RPAR *),
  272 (* THEN *),
  273 (* TIMES *),
    0];

val yylhs = "\255\255\
\\001\000\001\000\002\000\003\000\003\000\003\000\003\000\003\000\
\\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\\003\000\000\000";

val yylen = "\002\000\
\\001\000\002\000\003\000\001\000\001\000\001\000\003\000\003\000\
\\003\000\003\000\002\000\003\000\003\000\003\000\002\000\006\000\
\\003\000\002\000";

val yydefred = "\000\000\
\\000\000\000\000\001\000\000\000\018\000\000\000\000\000\002\000\
\\005\000\006\000\000\000\000\000\000\000\000\000\004\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000";

val yydgoto = "\002\000\
\\005\000\006\000\016\000";

val yysindex = "\005\000\
\\000\255\000\000\000\000\013\255\000\000\000\255\193\255\000\000\
\\000\000\000\000\193\255\193\255\193\255\193\255\000\000\102\255\
\\069\255\079\255\000\000\165\255\193\255\193\255\193\255\193\255\
\\193\255\193\255\193\255\193\255\000\000\116\255\000\000\149\255\
\\007\255\102\255\007\255\000\000\096\255\193\255\102\255";

val yyrindex = "\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\
\\000\000\000\000\018\255\145\255\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\177\255\035\255\161\255\
\\124\255\057\255\140\255\052\255\000\000\000\000\182\255";

val yygindex = "\000\000\
\\020\000\000\000\245\255";

val YYTABLESIZE = 205;
val yytable = "\017\000\
\\018\000\019\000\020\000\003\000\003\000\001\000\004\000\003\000\
\\022\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\\037\000\007\000\011\000\011\000\011\000\011\000\011\000\027\000\
\\011\000\008\000\039\000\011\000\000\000\000\000\011\000\011\000\
\\011\000\011\000\011\000\010\000\010\000\010\000\010\000\010\000\
\\000\000\010\000\000\000\000\000\010\000\000\000\000\000\010\000\
\\010\000\010\000\010\000\010\000\009\000\009\000\009\000\009\000\
\\009\000\000\000\009\000\014\000\014\000\009\000\000\000\014\000\
\\009\000\009\000\009\000\009\000\009\000\021\000\022\000\014\000\
\\014\000\023\000\000\000\000\000\000\000\000\000\024\000\021\000\
\\022\000\025\000\026\000\023\000\028\000\027\000\000\000\000\000\
\\024\000\000\000\000\000\025\000\026\000\029\000\000\000\027\000\
\\021\000\022\000\038\000\000\000\023\000\000\000\021\000\022\000\
\\000\000\024\000\023\000\000\000\025\000\026\000\000\000\024\000\
\\027\000\000\000\025\000\026\000\021\000\022\000\027\000\000\000\
\\023\000\000\000\000\000\000\000\008\000\024\000\008\000\008\000\
\\008\000\026\000\008\000\000\000\027\000\008\000\000\000\000\000\
\\008\000\008\000\008\000\008\000\007\000\000\000\007\000\007\000\
\\007\000\015\000\007\000\015\000\015\000\007\000\022\000\015\000\
\\007\000\007\000\007\000\007\000\000\000\015\000\024\000\015\000\
\\015\000\012\000\026\000\012\000\012\000\027\000\022\000\012\000\
\\000\000\023\000\000\000\000\000\000\000\012\000\024\000\012\000\
\\012\000\000\000\026\000\013\000\013\000\027\000\000\000\013\000\
\\016\000\016\000\000\000\000\000\016\000\013\000\000\000\013\000\
\\013\000\000\000\000\000\000\000\016\000\016\000\009\000\010\000\
\\011\000\012\000\013\000\014\000\015\000";

val yycheck = "\011\000\
\\012\000\013\000\014\000\004\001\004\001\001\000\007\001\007\001\
\\002\001\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\\028\000\005\001\001\001\002\001\003\001\004\001\005\001\017\001\
\\007\001\006\000\038\000\010\001\255\255\255\255\013\001\014\001\
\\015\001\016\001\017\001\001\001\002\001\003\001\004\001\005\001\
\\255\255\007\001\255\255\255\255\010\001\255\255\255\255\013\001\
\\014\001\015\001\016\001\017\001\001\001\002\001\003\001\004\001\
\\005\001\255\255\007\001\003\001\004\001\010\001\255\255\007\001\
\\013\001\014\001\015\001\016\001\017\001\001\001\002\001\015\001\
\\016\001\005\001\255\255\255\255\255\255\255\255\010\001\001\001\
\\002\001\013\001\014\001\005\001\016\001\017\001\255\255\255\255\
\\010\001\255\255\255\255\013\001\014\001\015\001\255\255\017\001\
\\001\001\002\001\003\001\255\255\005\001\255\255\001\001\002\001\
\\255\255\010\001\005\001\255\255\013\001\014\001\255\255\010\001\
\\017\001\255\255\013\001\014\001\001\001\002\001\017\001\255\255\
\\005\001\255\255\255\255\255\255\001\001\010\001\003\001\004\001\
\\005\001\014\001\007\001\255\255\017\001\010\001\255\255\255\255\
\\013\001\014\001\015\001\016\001\001\001\255\255\003\001\004\001\
\\005\001\001\001\007\001\003\001\004\001\010\001\002\001\007\001\
\\013\001\014\001\015\001\016\001\255\255\013\001\010\001\015\001\
\\016\001\001\001\014\001\003\001\004\001\017\001\002\001\007\001\
\\255\255\005\001\255\255\255\255\255\255\013\001\010\001\015\001\
\\016\001\255\255\014\001\003\001\004\001\017\001\255\255\007\001\
\\003\001\004\001\255\255\255\255\007\001\013\001\255\255\015\001\
\\016\001\255\255\255\255\255\255\015\001\016\001\006\001\007\001\
\\008\001\009\001\010\001\011\001\012\001";

val yyact = vector_ 19 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file Parser.grm, line 25 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( [] ) end : Syntax.Pgm))
;
(* Rule 2, file Parser.grm, line 26 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__1__ = peekVal 1 : Syntax.Def
val d__2__ = peekVal 0 : Syntax.Pgm
in
( (d__1__) :: (d__2__) ) end : Syntax.Pgm))
;
(* Rule 3, file Parser.grm, line 30 *)
val _ = update_ yyact 3
(fn () => repr(let
val d__1__ = peekVal 2 : string*(int*int)
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Syntax.Exp
in
( (#1 (d__1__),(d__3__)) ) end : Syntax.Def))
;
(* Rule 4, file Parser.grm, line 34 *)
val _ = update_ yyact 4
(fn () => repr(let
val d__1__ = peekVal 0 : int*(int*int)
in
( Syntax.ICONST (#1 (d__1__), #2 (d__1__)) ) end : Syntax.Exp))
;
(* Rule 5, file Parser.grm, line 35 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 0 : real*(int*int)
in
( Syntax.FCONST (#1 (d__1__), #2 (d__1__)) ) end : Syntax.Exp))
;
(* Rule 6, file Parser.grm, line 36 *)
val _ = update_ yyact 6
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( Syntax.ID (#1 (d__1__), #2 (d__1__)) ) end : Syntax.Exp))
;
(* Rule 7, file Parser.grm, line 37 *)
val _ = update_ yyact 7
(fn () => repr(let
val d__1__ = peekVal 2 : Syntax.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Syntax.Exp
in
( Syntax.PLUS ((d__1__),(d__3__), (d__2__)) ) end : Syntax.Exp))
;
(* Rule 8, file Parser.grm, line 38 *)
val _ = update_ yyact 8
(fn () => repr(let
val d__1__ = peekVal 2 : Syntax.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Syntax.Exp
in
( Syntax.MINUS ((d__1__),(d__3__), (d__2__)) ) end : Syntax.Exp))
;
(* Rule 9, file Parser.grm, line 39 *)
val _ = update_ yyact 9
(fn () => repr(let
val d__1__ = peekVal 2 : Syntax.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Syntax.Exp
in
( Syntax.TIMES ((d__1__),(d__3__), (d__2__)) ) end : Syntax.Exp))
;
(* Rule 10, file Parser.grm, line 41 *)
val _ = update_ yyact 10
(fn () => repr(let
val d__1__ = peekVal 2 : Syntax.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Syntax.Exp
in
( Syntax.DIVIDE ((d__1__),(d__3__), (d__2__)) ) end : Syntax.Exp))
;
(* Rule 11, file Parser.grm, line 43 *)
val _ = update_ yyact 11
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Syntax.Exp
in
( Syntax.UMINUS ((d__2__), (d__1__)) ) end : Syntax.Exp))
;
(* Rule 12, file Parser.grm, line 44 *)
val _ = update_ yyact 12
(fn () => repr(let
val d__1__ = peekVal 2 : Syntax.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Syntax.Exp
in
( Syntax.EQ ((d__1__),(d__3__), (d__2__)) ) end : Syntax.Exp))
;
(* Rule 13, file Parser.grm, line 45 *)
val _ = update_ yyact 13
(fn () => repr(let
val d__1__ = peekVal 2 : Syntax.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Syntax.Exp
in
( Syntax.AND ((d__1__),(d__3__), (d__2__)) ) end : Syntax.Exp))
;
(* Rule 14, file Parser.grm, line 46 *)
val _ = update_ yyact 14
(fn () => repr(let
val d__1__ = peekVal 2 : Syntax.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Syntax.Exp
in
( Syntax.OR ((d__1__),(d__3__), (d__2__)) ) end : Syntax.Exp))
;
(* Rule 15, file Parser.grm, line 47 *)
val _ = update_ yyact 15
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Syntax.Exp
in
( Syntax.NOT ((d__2__), (d__1__)) ) end : Syntax.Exp))
;
(* Rule 16, file Parser.grm, line 49 *)
val _ = update_ yyact 16
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : Syntax.Exp
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Syntax.Exp
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Syntax.Exp
in
( Syntax.IF ((d__2__),(d__4__),(d__6__), (d__1__)) ) end : Syntax.Exp))
;
(* Rule 17, file Parser.grm, line 50 *)
val _ = update_ yyact 17
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Syntax.Exp
val d__3__ = peekVal 0 : (int*int)
in
( (d__2__) ) end : Syntax.Exp))
;
(* Entry Defs *)
val _ = update_ yyact 18 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun Defs lexer lexbuf = yyparse yytables 1 lexer lexbuf;
